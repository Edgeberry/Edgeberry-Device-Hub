[
  {
    "id": "flow-devicehub-integration",
    "type": "tab",
    "label": "Edgeberry Device Hub - App Client",
    "disabled": false,
    "info": "Integration with Edgeberry Device Hub using @edgeberry/devicehub-app-client npm package"
  },
  {
    "id": "config-devicehub",
    "type": "subflow:env",
    "name": "Device Hub Config",
    "env": [
      {
        "name": "API_TOKEN",
        "value": "YOUR_API_TOKEN_HERE",
        "type": "str"
      },
      {
        "name": "DEVICEHUB_HOST",
        "value": "localhost",
        "type": "str"
      },
      {
        "name": "DEVICEHUB_PORT",
        "value": "8090",
        "type": "num"
      }
    ]
  },
  {
    "id": "inject-get-devices",
    "type": "inject",
    "z": "flow-devicehub-integration",
    "name": "Get Device List",
    "props": [{"p": "payload"}],
    "repeat": "30",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "{}",
    "payloadType": "json",
    "x": 130,
    "y": 100,
    "wires": [["fn-get-devices"]]
  },
  {
    "id": "fn-get-devices",
    "type": "function",
    "z": "flow-devicehub-integration",
    "name": "Get Devices (App Client)",
    "func": "// Import the Device Hub App Client\nconst { DeviceHubAppClient } = require('@edgeberry/devicehub-app-client');\n\n// Get configuration\nconst apiToken = env.get('API_TOKEN');\nconst host = env.get('DEVICEHUB_HOST');\nconst port = env.get('DEVICEHUB_PORT');\n\n// Initialize client if not exists\nif (!global.deviceHubClient) {\n    global.deviceHubClient = new DeviceHubAppClient({\n        host: host,\n        port: port,\n        token: apiToken\n    });\n}\n\nconst client = global.deviceHubClient;\n\n// Get device list\nclient.getDevices()\n    .then(devices => {\n        msg.payload = devices;\n        node.send(msg);\n    })\n    .catch(error => {\n        node.error('Failed to get devices: ' + error.message);\n        msg.payload = { error: error.message };\n        node.send(msg);\n    });\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 340,
    "y": 100,
    "wires": [["fn-process-devices"]]
  },
  {
    "id": "fn-process-devices",
    "type": "function",
    "z": "flow-devicehub-integration",
    "name": "Process Device List",
    "func": "// Handle error responses\nif (msg.payload.error) {\n    node.error('Device list error: ' + msg.payload.error);\n    return null;\n}\n\n// Store devices in flow context\nconst devices = Array.isArray(msg.payload) ? msg.payload : [];\nflow.set('devices', devices);\n\n// Format for dashboard\nmsg.payload = devices.map(d => ({\n    deviceId: d.deviceId,\n    name: d.name,\n    status: d.status || 'offline',\n    lastSeen: d.lastSeen,\n    model: d.model,\n    createdAt: d.createdAt\n}));\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 560,
    "y": 100,
    "wires": [["debug-devices", "ui-device-table"]]
  },
  {
    "id": "debug-devices",
    "type": "debug",
    "z": "flow-devicehub-integration",
    "name": "Device List",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 780,
    "y": 80,
    "wires": []
  },
  {
    "id": "ui-device-table",
    "type": "ui_table",
    "z": "flow-devicehub-integration",
    "group": "ui-group-devices",
    "name": "Device Table",
    "order": 1,
    "width": 12,
    "height": 6,
    "columns": [],
    "outputs": 1,
    "cts": true,
    "x": 780,
    "y": 120,
    "wires": [["fn-device-selected"]]
  },
  {
    "id": "inject-start-telemetry",
    "type": "inject",
    "z": "flow-devicehub-integration",
    "name": "Start Telemetry Stream",
    "props": [{"p": "payload"}],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "3",
    "topic": "",
    "payload": "true",
    "payloadType": "bool",
    "x": 150,
    "y": 240,
    "wires": [["fn-start-telemetry"]]
  },
  {
    "id": "fn-start-telemetry",
    "type": "function",
    "z": "flow-devicehub-integration",
    "name": "Start Telemetry (App Client)",
    "func": "// Get the initialized client\nconst client = global.deviceHubClient;\n\nif (!client) {\n    node.error('Device Hub client not initialized');\n    return null;\n}\n\n// Start telemetry streaming for all devices\nclient.startTelemetryStream(['*'], (data) => {\n    // Forward telemetry data to Node-RED flow\n    const msg = {\n        payload: data,\n        topic: 'telemetry'\n    };\n    node.send(msg);\n});\n\nnode.status({fill: 'green', shape: 'dot', text: 'Streaming telemetry'});\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 240,
    "wires": [["fn-process-telemetry"]]
  },
  {
    "id": "fn-process-telemetry",
    "type": "function",
    "z": "flow-devicehub-integration",
    "name": "Process Telemetry",
    "func": "// Process telemetry data from app client\nconst data = msg.payload;\n\nif (!data || !data.deviceId) {\n    return null;\n}\n\n// Store latest telemetry\nconst telemetry = flow.get('telemetry') || {};\ntelemetry[data.deviceId] = {\n    ...data.data,\n    timestamp: data.timestamp || new Date().toISOString()\n};\nflow.set('telemetry', telemetry);\n\n// Format for dashboard\nmsg.payload = {\n    deviceId: data.deviceId,\n    temperature: data.data?.temperature,\n    humidity: data.data?.humidity,\n    timestamp: data.timestamp\n};\nmsg.topic = 'telemetry';\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 240,
    "wires": [["switch-telemetry-type"]]
  },
  {
    "id": "switch-telemetry-type",
    "type": "switch",
    "z": "flow-devicehub-integration",
    "name": "Route by Type",
    "property": "topic",
    "propertyType": "msg",
    "rules": [
      {"t": "eq", "v": "telemetry", "vt": "str"},
      {"t": "eq", "v": "status", "vt": "str"},
      {"t": "eq", "v": "event", "vt": "str"}
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 3,
    "x": 780,
    "y": 240,
    "wires": [
      ["ui-gauge-temp", "ui-gauge-humid", "ui-chart"],
      ["ui-status-led"],
      ["ui-event-log"]
    ]
  },
  {
    "id": "fn-device-selected",
    "type": "function",
    "z": "flow-devicehub-integration",
    "name": "Device Selected",
    "func": "// User selected a device from the table\nconst deviceId = msg.payload.deviceId;\n\nif (deviceId) {\n    flow.set('selectedDevice', deviceId);\n    \n    // Get the client and subscribe to specific device\n    const client = global.deviceHubClient;\n    if (client) {\n        client.subscribeToDevice(deviceId);\n        node.status({fill: 'blue', shape: 'dot', text: 'Subscribed to ' + deviceId});\n    }\n}\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1000,
    "y": 120,
    "wires": [[]]
  },
  {
    "id": "inject-method",
    "type": "inject",
    "z": "flow-devicehub-integration",
    "name": "Call Device Method",
    "props": [
      {"p": "payload"},
      {"p": "deviceId", "v": "416b3195-779f-4ce9-b327-284da5ee6473", "vt": "str"},
      {"p": "method", "v": "identify", "vt": "str"}
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"duration\": 5}",
    "payloadType": "json",
    "x": 140,
    "y": 360,
    "wires": [["fn-call-method"]]
  },
  {
    "id": "fn-call-method",
    "type": "function",
    "z": "flow-devicehub-integration",
    "name": "Call Method (App Client)",
    "func": "// Get the initialized client\nconst client = global.deviceHubClient;\n\nif (!client) {\n    node.error('Device Hub client not initialized');\n    return null;\n}\n\nconst deviceId = msg.deviceId;\nconst methodName = msg.method;\nconst payload = msg.payload;\n\n// Call device method\nclient.callDeviceMethod(deviceId, methodName, payload)\n    .then(response => {\n        msg.payload = response;\n        node.send(msg);\n    })\n    .catch(error => {\n        node.error('Method call failed: ' + error.message);\n        msg.payload = { error: error.message };\n        node.send(msg);\n    });\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 360,
    "wires": [["debug-method"]]
  },
  {
    "id": "debug-method",
    "type": "debug",
    "z": "flow-devicehub-integration",
    "name": "Method Response",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 580,
    "y": 360,
    "wires": []
  },
  {
    "id": "ui-gauge-temp",
    "type": "ui_gauge",
    "z": "flow-devicehub-integration",
    "name": "Temperature",
    "group": "ui-group-telemetry",
    "order": 1,
    "width": 6,
    "height": 4,
    "gtype": "gage",
    "title": "Temperature",
    "label": "Â°C",
    "format": "{{payload.temperature}}",
    "min": 0,
    "max": 50,
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": 20,
    "seg2": 30,
    "x": 790,
    "y": 200,
    "wires": []
  },
  {
    "id": "ui-gauge-humid",
    "type": "ui_gauge",
    "z": "flow-devicehub-integration",
    "name": "Humidity",
    "group": "ui-group-telemetry",
    "order": 2,
    "width": 6,
    "height": 4,
    "gtype": "gage",
    "title": "Humidity",
    "label": "%",
    "format": "{{payload.humidity}}",
    "min": 0,
    "max": 100,
    "colors": ["#ca3838", "#00b500", "#0080ff"],
    "seg1": 30,
    "seg2": 70,
    "x": 780,
    "y": 240,
    "wires": []
  },
  {
    "id": "ui-chart",
    "type": "ui_chart",
    "z": "flow-devicehub-integration",
    "name": "Telemetry History",
    "group": "ui-group-telemetry",
    "order": 3,
    "width": 12,
    "height": 6,
    "label": "Telemetry History",
    "chartType": "line",
    "legend": "true",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "No data",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": 1,
    "removeOlderPoints": "100",
    "removeOlderUnit": "3600",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": ["#1f77b4", "#ff7f0e", "#2ca02c"],
    "outputs": 1,
    "useDifferentColor": false,
    "x": 790,
    "y": 280,
    "wires": [[]]
  },
  {
    "id": "ui-status-led",
    "type": "ui_text",
    "z": "flow-devicehub-integration",
    "group": "ui-group-status",
    "order": 1,
    "width": 6,
    "height": 1,
    "name": "Device Status",
    "label": "{{payload.deviceId}}",
    "format": "{{payload.online ? 'Online' : 'Offline'}}",
    "layout": "row-spread",
    "x": 780,
    "y": 320,
    "wires": []
  },
  {
    "id": "ui-event-log",
    "type": "ui_text",
    "z": "flow-devicehub-integration",
    "group": "ui-group-events",
    "order": 1,
    "width": 12,
    "height": 4,
    "name": "Event Log",
    "label": "Events",
    "format": "{{payload.deviceId}}: {{payload.event}}",
    "layout": "col-center",
    "x": 770,
    "y": 360,
    "wires": []
  },
  {
    "id": "ui-group-devices",
    "type": "ui_group",
    "name": "Devices",
    "tab": "ui-tab-devicehub",
    "order": 1,
    "disp": true,
    "width": 12
  },
  {
    "id": "ui-group-telemetry",
    "type": "ui_group",
    "name": "Telemetry",
    "tab": "ui-tab-devicehub",
    "order": 2,
    "disp": true,
    "width": 12
  },
  {
    "id": "ui-group-status",
    "type": "ui_group",
    "name": "Status",
    "tab": "ui-tab-devicehub",
    "order": 3,
    "disp": true,
    "width": 6
  },
  {
    "id": "ui-group-events",
    "type": "ui_group",
    "name": "Events",
    "tab": "ui-tab-devicehub",
    "order": 4,
    "disp": true,
    "width": 12
  },
  {
    "id": "ui-tab-devicehub",
    "type": "ui_tab",
    "name": "Edgeberry Device Hub",
    "icon": "dashboard",
    "order": 1
  }
]
